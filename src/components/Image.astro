---
import crypto from "crypto";
import type ImageConfig from "/src/interfaces/ImageConfig.ts";
import getImage from "../utils/getImage.js";

const {
  src,
  alt,
  preload,
  loading = preload ? "eager" : "lazy",
  decoding = "async",
  breakpoints,
  objectFit = "contain",
  objectPosition = "50% 50%",
  layout = "constrained",
  placeholder = "blurred",
  artDirectives,
  format = ["avif", "webp"],
  formatOptions = {
    tracedSVG: {
      function: "trace",
    },
  },
  fallbackFormat,
  includeSourceFormat = true,
  ...configOptions
} = Astro.props as ImageConfig;

const label = `Image at ${src} optimized in`;

console.time(label);
const { sources, fallbacks } = await getImage(
  src,
  format,
  breakpoints,
  placeholder,
  artDirectives,
  fallbackFormat,
  includeSourceFormat,
  formatOptions,
  configOptions
);
console.timeEnd(label);

fallbacks.reverse();

const uuid = `astro-image-${crypto
  .randomBytes(4)
  .toString("hex")
  .toUpperCase()}`;

const { width, height } = sources.at(-1).sizes;

const imagesrcset =
  preload && sources.find(({ format: fmt }) => fmt === preload)?.srcset;
const imagesizes = `(min-width: ${width}px) ${width}px, 100vw`;

const style = `<style>
${fallbacks
  .map(({ src, media }) =>
    media
      ? `@media ${media} {
  .${uuid} {
    background-image: url(${src});
    background-size: ${objectFit};
    background-position: ${objectPosition};
  }
}`
      : `.${uuid} {
  background-image: url(${src});
  background-size: ${objectFit};
  background-position: ${objectPosition};
}`
  )
  .join("\n\n")}
</style>`;
---

{preload && (
  <link
    rel="preload"
    as="image"
    imagesrcset={imagesrcset}
    imagesizes={imagesizes}
  />
)}

{style}

{sources.length > 1 && `<picture>`}
{sources.map(({ media, format, src, srcset, sizes, object }) =>
  src ? (
    <img
      class={uuid}
      src={src}
      alt={alt}
      {...sizes}
      srcset={srcset}
      loading={loading}
      sizes={imagesizes}
      decoding={decoding}
      style={
        `object-fit: ${object?.fit || objectFit}; object-position: ${
          object?.position || objectPosition
        }; ` +
        (layout === "fill"
          ? `width: 100%; height: 100%;`
          : layout === "fixed"
          ? `width: ${width}px; height: ${height}px;`
          : layout === "fullWidth"
          ? `width: 100%; padding-top: ${(height * 100) / width}%;`
          : "max-width: 100%; height: auto;")
      }
    />
  ) : (
    <source
      {...sizes}
      media={media}
      type={`image/${format}`}
      srcset={srcset}
      sizes={imagesizes}
    />
  )
)}
{sources.length > 1 && `</picture>`}
